{"version":3,"sources":["webpack:///./src/components/Alert.js","webpack:///./src/components/TextMuted.js","webpack:///./src/containers/TrelloPage.js"],"names":["Alert","children","style","Error","object","transformMessage","message","Object","entries","length","map","key","value","i","toUpperCase","Array","isArray","join","Success","text","align","mb","mt","TrelloPage","React","Component","constructor","props","fetchTrelloBoardLists","fetchTrelloBoardMembers","fetchTrelloBoardLabels","values","createTrelloCard","attachment","annotatedScreenshot","imageURI","history","push","ROUTING","POST_PAGE","componentDidMount","integrations","fetchTrelloBoards","render","currentUser","trello","OPTIONS_PAGE","SCREEN_CAPTURE_EDITOR","PATH","replace","uuid","error","onCreateTrelloCard","boards","onBoardChange","lists","labels","members","mapDispatchToProps","dispatch","bindActionCreators","openTab","removeMessages","mapStateToProps","state","auth","integrationsList","screenshot","screenshots","connect"],"mappings":"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","file":"10.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Alert = ({children, style }) => (\n  <div className={`alert alert-${style}`} role=\"alert\">\n    { children }\n  </div>\n)\n\n\nAlert.Error = ({object, style=\"danger\" }) => {\n  const transformMessage = () => {\n    const { message } = object\n    if (typeof message === 'string'){\n      return (<p key={0} className=\"m-0 p-0\"><strong key={0}>Oops! </strong>{message.message}</p>)\n    }\n\n    if (typeof message === 'object' && Object.entries(message).length){\n      return Object.entries(message).map(([key, value], i) =>\n        (<p key={key} className=\"m-0 p-0\"><strong key={key}>{key.toUpperCase()}: </strong>{Array.isArray(value) ? value.join(', ') : value}</p>)\n      )\n    }\n\n    return (<p key={0} className=\"m-0 p-0\"><strong key={0}>Oops! </strong>Bad things happend</p>)\n  }\n\n  return (\n    <Alert style={style}>\n      {transformMessage()}\n    </Alert>\n  )\n}\n\n\nAlert.Success = ({ object, style=\"success\" }) => {\n  \n  const transformMessage = () => {\n    if (typeof object === 'object' && Object.entries(object).length){\n      return Object.entries(object).map(([key, value], i) =>\n        (<p key={key} className=\"m-0 p-0\"><strong key={key}>{key.toUpperCase()}: </strong>{Array.isArray(value) ? value.join(', ') : value}</p>)\n      )\n    }\n    \n    return (<p className=\"m-0 p-0\"><strong>Well done! </strong>{object}</p>)\n  }\n\n  return (\n    <Alert style={style}>\n      {transformMessage()}\n    </Alert>\n  )\n}\n\n\nexport default Alert\n","import React from 'react'\n\nimport TextAlign from './TextAlign'\n\n\nexport default ({text, align='center', mb=0, mt=0}) =>\n  <TextAlign align={align} mb={mb} mt={mt}>\n    <small className=\"text-muted\">{text}</small>\n  </TextAlign>\n","import React from 'react'\nimport { NavLink, Redirect } from 'react-router-dom'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport { ROUTING, PAGE } from '../constants'\n\nimport {\n  openTab,\n  removeMessages,\n  fetchTrelloBoards,\n  createTrelloCard,\n  fetchTrelloBoardLists,\n  fetchTrelloBoardMembers,\n  fetchTrelloBoardLabels\n} from '../actions'\n\nimport Button from '../components/Button'\nimport Col from '../components/Col'\nimport Row from '../components/Row'\nimport Container from '../components/Container'\nimport Navbar from '../components/Navbar'\nimport Card from '../components/Card'\nimport TextAlign from '../components/TextAlign'\nimport TextMuted from '../components/TextMuted'\nimport TrelloForm from '../components/TrelloForm'\nimport Alert from '../components/Alert'\nimport Text from '../components/Text'\n\n\nclass TrelloPage extends React.Component {\n\n  constructor(props) {\n    super(props)\n  }\n\n  componentDidMount() {\n    const { integrations } = this.props\n    if (integrations.length){\n      this.props.fetchTrelloBoards()\n    }\n  }\n\n  onBoardChange = (value) => {\n    this.props.fetchTrelloBoardLists(value)\n    this.props.fetchTrelloBoardMembers(value)\n    this.props.fetchTrelloBoardLabels(value)\n  }\n\n  onCreateTrelloCard = (values) => {\n    this.props.createTrelloCard({...values, attachment: this.props.annotatedScreenshot.imageURI })\n    this.props.history.push(ROUTING.POST_PAGE)\n  }\n\n  render () {\n    const { integrations, currentUser, annotatedScreenshot, trello } = this.props\n    if (!annotatedScreenshot){\n      return <Redirect to={ROUTING.OPTIONS_PAGE} />\n    }else {\n      return (\n        <>\n          <Navbar>\n            <Navbar.Link to={ROUTING.OPTIONS_PAGE} text=\"Options\" />\n            <Navbar.Link to={ROUTING.SCREEN_CAPTURE_EDITOR.PATH.replace(/:uuid/gi, annotatedScreenshot.uuid)} text=\"Go Back to Previous Page\" />\n          </Navbar>\n          <Container fullWidth={false}  mt={!integrations.length ? 200 : 400}>\n            <Row>\n              <Col xl={8} lg={8} md={8} sm={12} >\n                { trello.error && <Alert.Error object={trello.error} /> }\n                { !integrations.length\n                  ? (<Card bg=\"secondary\">\n                    <Card.Header>\n                      <Card.Title text={!integrations.length ? \"No trello account available\" : \"Post it on Trello\"} />\n                    </Card.Header>\n                    <Card.Body px={5} py={5}>\n                      <Text object={{\"Info \" : \"In order to post this screen capture on trello you need to login then link your trello account\"}} />\n                      <TextAlign align=\"center\">\n                        <NavLink to={ROUTING.OPTIONS_PAGE}>\n                          Check your options page\n                        </NavLink>\n                      </TextAlign>\n                    </Card.Body>\n                  </Card>)\n                  : (<Card bg=\"secondary\">\n                    <Card.Header>\n                      <Card.Title text=\"Post it on Trello\" />\n                    </Card.Header>\n                    <Card.Body px={5} py={5}>\n                      <TrelloForm\n                        onSubmit={this.onCreateTrelloCard}\n                        boards={trello.boards}\n                        onChangeBoard={this.onBoardChange}\n                        lists={trello.lists}\n                        labels={trello.labels}\n                        members={trello.members}\n                      />\n                    </Card.Body>\n                  </Card>)\n                }\n              </Col>\n            </Row>\n          </Container>\n        </>\n      )\n    }\n  }\n}\n\n\nconst mapDispatchToProps = (dispatch) => bindActionCreators({\n  openTab,\n  removeMessages,\n  fetchTrelloBoardLabels,\n  fetchTrelloBoards,\n  fetchTrelloBoardLists,\n  fetchTrelloBoardMembers,\n  createTrelloCard\n}, dispatch)\n\nconst mapStateToProps = state => {\n  const { currentUser } = state.auth\n  const { integrationsList: { integrations }, trello } = state.integrations\n  const { screenshot: annotatedScreenshot } = state.screenshots\n\n  return { currentUser, integrations, trello, annotatedScreenshot }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TrelloPage)\n"],"sourceRoot":""}